> Note: This sample I/O is meant to demonstrate the syntax for all
> input commands and to answer all questions about the syntax of
> output. It does not meaningfully exercise the logic of the hash
> table or the memory manager.

> Call the program as:
> java SemManager 512 4 P1Sample_input.txt

> insert 1
> Overview of HCI Research at VT
> 0610051600 90 10 10 45
> HCI Computer_Science VT Virginia_Tech
> This seminar will present an overview of HCI research at VT
Successfully inserted record with ID 1
ID: 1, Title: Overview of HCI Research at VT
Date: 0610051600, Length: 90, X: 10, Y: 10, Cost: 45
Description: This seminar will present an overview of HCI research at VT
Keywords: HCI, Computer_Science, VT, Virginia_Tech
Size: 173
> This insert will use the first block of 256 bytes in the memory array

> insert 2
> Computational Biology and Bioinformatics in CS at Virginia Tech
>       0610071600       60     20     10 30
> Bioinformatics computation_biology Biology Computer_Science VT Virginia_Tech
>     Introduction to   bioinformatics and computation biology
Successfully inserted record with ID 2
ID: 2, Title: Computational Biology and Bioinformatics in CS at Virginia Tech
Date: 0610071600, Length: 60, X: 20, Y: 10, Cost: 30
Description: Introduction to   bioinformatics and computation biology
Keywords: Bioinformatics, computation_biology, Biology, Computer_Science, VT, Virginia_Tech
Size: 244
> This insert will use the second block of 256 bytes in the memory array,
> thus exhausting the memory pool

> insert 3
> Computing Systems Research at VT
> 0701250830  30 30   10  17
> high_performance_computing           grids     VT computer science
>  Seminar about the      Computing systems research at      VT
Memory pool expanded to 1024 bytes
Hash Table expanded to 8 records
Successfully inserted record with ID 3
ID: 3, Title: Computing Systems Research at VT
Date: 0701250830, Length: 30, X: 30, Y: 10, Cost: 17
Description: Seminar about the      Computing systems research at      VT
Keywords: high_performance_computing, grids, VT, computer, science
Size: 192
> Note that we had two records each taking up 256 bytes to exhaust the
> inital memory pool. Thus, this 3rd record requires us to double the
> size (triggering a message).
> Note that we had two records already in the hash table. Adding the
> third record makes it more than half full, so we double the table
> size.
> Note that the memory manager gets changed before the hash table
> (because the hash table has to store the handle resulting from
> inserting into the memory manager).

> insert 3
> Overview of HPC and CSE Research at VT
> 0703301125     35        0  0                                           25
>       HPC      CSE      computer_science 
> Learn what kind of    research is done on HPC  and CSE at VT
Insert FAILED - There is already a record with ID 3
> Duplicate ID, so it fails.
> Neither the hash table nor the memory manager should change.

> insert 10
> Overview of HPC and CSE Research at VT
> 0703301125     35        0  0                                           25
>       HPC      CSE      computer_science 
> Learn what kind of    research is done on HPC  and CSE at VT
Successfully inserted record with ID 10
ID: 10, Title: Overview of HPC and CSE Research at VT
Date: 0703301125, Length: 35, X: 0, Y: 0, Cost: 25
Description: Learn what kind of    research is done on HPC  and CSE at VT
Keywords: HPC, CSE, computer_science
Size: 168
> This record will take up the last block of 256 bytes in the memory array

> search 3
Found record with ID 3:
ID: 3, Title: Computing Systems Research at VT
Date: 0701250830, Length: 30, X: 30, Y: 10, Cost: 17
Description: Seminar about the      Computing systems research at      VT
Keywords: high_performance_computing, grids, VT, computer, science

> print hashtable
Hashtable:
1: 1
2: 2
3: 3
5: 10
total records: 4
> Originally the hash table had 4 slots, and records 1 and 2 went into
> those slots, respectively. The third record would overfill the hash
> table, so it doubled. Record 3 then went into slot 3. Record 10 hashes
> to slot (10 mod 8) = 2. Since this is already full, double hashing
> kicks in.
> The calculation is (((10/8) mod (8/2)) * 2) + 1 which works out to
> be 3. That means we use steps of size 3 starting at the homeslot
> (which is slot 2 for this record). Since 2 + 3 = 5, we hash to slot 5.

> print blocks
Freeblock List:
There are no freeblocks in the memory pool
> We currently hold 4 records each taking 256 bytes. Since the total
> memory pool is currently 1024 bytes, there are no free blocks. So we
> print a special message.

> delete    2
Record with ID 2 successfully deleted from the database

> search 2
Search FAILED -- There is no record with ID 2
> We just deleted it!

> print hashtable
Hashtable:
1: 1
2: TOMBSTONE
3: 3
5: 10
total records: 3
> Note that deleting 2 requires a TOMBSTONE, otherwise we would lose
> access to record 10.

> print blocks
Freeblock List:
256: 256
> When we deleted record with ID 2, we freed the second block of 256
> bytes (which starts at byte position 256). So this is telling us
> that we have one block of size 256, starting at byte position 256.

> delete 6
Delete FAILED -- There is no record with ID 6


> insert 2
> Much More Computational Biology and Bioinformatics in CS at Virginia Tech
>       0610071600       60     20     10 30
> Bioinformatics computation_biology Biology Computer_Science VT Virginia_Tech
>     Introduction to bioinformatics and lots of computation biology

Memory pool expanded to 2048 bytes
Successfully inserted record with ID 2
ID: 2, Title: Much More Computational Biology and Bioinformatics in CS at Virginia Tech
Date: 0610071600, Length: 60, X: 20, Y: 10, Cost: 30
Description: Introduction to bioinformatics and lots of computation biology
Keywords: Bioinformatics, computation_biology, Biology, Computer_Science, VT, Virginia_Tech
Size: 260

> This record needs 260 bytes. There is a single free block of 256 bytes.
> So we have to expand the memory pool again to 2048 bytes.
> Since the key value is 2, it replaces the TOMBSTONE value.

>   delete 10

Record with ID 10 successfully deleted from the database

> print hashtable   
Hashtable:
1: 1
2: 2
3: 3
5: TOMBSTONE
total records: 3

>   print blocks
Freeblock List:
256: 256 768
512: 1536

> This shows that the block lists are printed in ascending size order, with all
> blocks of a given size listed on a row in ascending byte position order.
