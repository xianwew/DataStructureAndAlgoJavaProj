
/**
 * {Project Description Here}
 */

/**
 * The class containing the main method.
 *
 * @author {Your Name Here}
 * @version {Put Something Here}
 */

// On my honor:
// - I have not used source code obtained from another current or
//   former student, or any other unauthorized source, either
//   modified or unmodified.
//
// - All source code and documentation used in my program is
//   either my original work, or was derived by me from the
//   source code published in the textbook for this course.
//
// - I have not discussed coding details about this project with
//   anyone other than my partner (in the case of a joint
//   submission), instructor, ACM/UPE tutors or the TAs assigned
//   to this course. I understand that I may discuss the concepts
//   of this program with other students, and that another student
//   may help me debug my program so long as neither of us writes
//   anything during the discussion or modifies any computer file
//   during the discussion. I have violated neither the spirit nor
//   letter of this restriction.

import java.io.*;
import java.util.*;

public class SemManager {
    /**
     * @param args
     *     Command line parameters
     */
	private FreeList dummy;
	private int size;
	private byte[] memoryPool;
	public SemManager(){}

	public void initializeSemManger(int size) {
		dummy = new FreeList(-1, -1);
		FreeList head = new FreeList(size, 0);
		dummy.setNext(head);
		head.setPrev(dummy);
		this.size = size;
		this.memoryPool = new byte[size];
	}

	public void printSemMenger(){	
		FreeList curPosition = dummy.getNext();
		if(curPosition == null) {
			System.out.println("There are no Freeblocks in the memory pool!");
		}
		else{
			System.out.println("Freeblock List:");
			while(curPosition != null){
				System.out.println(curPosition.getIndex() + ": " + curPosition.getVal());
				curPosition = curPosition.getNext();
			}	
		}
	}
	
	public void search(Handle handle) {
		Seminar searchedRecord = new Seminar();
		byte[] searchedRecordByte = new byte[handle.getSize()];
		int curSearchedRecordByteIndex = 0;
		System.out.println("search handle start index: " + handle.getStartIndex());
		for(int i = handle.getStartIndex(); i < handle.getStartIndex() + handle.getSize(); i++){
			searchedRecordByte[curSearchedRecordByteIndex] = memoryPool[i];
			curSearchedRecordByteIndex++;
		}
		try {
			searchedRecord = Seminar.deserialize(searchedRecordByte);
			System.out.println(searchedRecord.toString());
		}
		catch(Exception e) {
            System.out.println("Error in reading seminar record in memory manager!");
            e.printStackTrace();
		}
	}
	
	public void doubleSize(){
		System.out.println("doubling memory pool size!");
		byte[] tmp = new byte[size*2];
		for(int i = 0; i < memoryPool.length; i++) {
			tmp[i] = memoryPool[i];
		}
		FreeList newInsert = new FreeList(size, 0);
		FreeList curPosition = dummy;	
		while(curPosition != null && curPosition.getNext() != null){
			curPosition = curPosition.getNext();
		}
		curPosition.setNext(newInsert);
		newInsert.setPrev(curPosition);	
		newInsert.setIndex(size);
		memoryPool = tmp;
		size *= 2;
	}
	
	public FreeList FindSpaceAvailable(int requestedSize){
		FreeList curPosition = dummy.getNext();
		FreeList ReturnPtr = null;
		int smallestGreaterThanReq = Integer.MAX_VALUE;
		while(curPosition != null){
			if(curPosition.getVal() >= requestedSize && curPosition.getVal() <= smallestGreaterThanReq){
				smallestGreaterThanReq = curPosition.getVal();
				ReturnPtr = curPosition;
			}
			System.out.println("Current ptr size: " + curPosition.getVal());	
			curPosition = curPosition.getNext();
		}
		return ReturnPtr;
	}
	
	private int getNearestPowerOfTwo(int requestedSize) {
        if(Math.log(requestedSize) / Math.log(2) == 0){
            return requestedSize;
        }
        int nearestPowerOfTwo = 1;
        while (nearestPowerOfTwo < requestedSize){
        	nearestPowerOfTwo *= 2; 
        }
        return nearestPowerOfTwo;
    }
	
	public void splitMemoryPool(int insertPositionSize, FreeList insertPosition){
		FreeList prev = insertPosition.getPrev(), next = insertPosition.getNext();
		FreeList newInsert = new FreeList(insertPositionSize / 2, insertPosition.getIndex() + insertPositionSize / 2);
		newInsert.setPrev(insertPosition);
		newInsert.setNext(next);
		insertPosition.setNext(newInsert);
		System.out.println("InsertPosition next val: " + insertPosition.getNext().getVal());	
		insertPosition.setVal(insertPositionSize / 2);
		if(next != null){
			next.setPrev(newInsert);
		}
		System.out.println("cur ptr length: " + insertPosition.getVal());	
		System.out.println("splited ptr length: " + insertPosition.getNext().getVal());	
	}
	
	public Handle insert(byte[] insertData, int key){
		Handle handle = new Handle(-1, -1, -1);
		FreeList insertPosition = FindSpaceAvailable(insertData.length);
		System.out.println("insertData length: " + insertData.length);	
		System.out.println("Memory Pool length: " + memoryPool.length);	
		while(insertPosition == null){
			doubleSize();	
			insertPosition = FindSpaceAvailable(insertData.length);
		}	
		//System.out.println("insertPosition Prev Val: " + insertPosition.getPrev().getVal());
		while(insertPosition.getVal() > getNearestPowerOfTwo(insertData.length)){
			splitMemoryPool(insertPosition.getVal(), insertPosition);
		}
		FreeList prev = insertPosition.getPrev(), next = insertPosition.getNext();
		//System.out.println("InsertPosition next val: " + next.getVal());	
		int insertStartIndex = insertPosition.getIndex();
		handle.setStartIndex(insertStartIndex);
		handle.setSize(insertData.length);
		handle.setKey(key);
		for(byte i : insertData){
			memoryPool[insertStartIndex] = i;
			insertStartIndex++;
		}
		System.out.println("Insert position " + insertPosition.getIndex());	
		insertPosition.setNext(null);
		insertPosition.setPrev(null);
		prev.setNext(next);
		if(next != null){
			next.setPrev(prev);
		}
		System.out.println("Succeessfully inserted record with ID " + key);			
		FreeList testPtr = dummy;
		while(testPtr != null){
			System.out.println("ptr val: " + testPtr.getVal());	
			testPtr = testPtr.getNext();
		}
		return handle;
	}	
	
	public int getNearestPowerOfTwoSmaller(int number) {
		if (number <= 0) {
            throw new IllegalArgumentException("Input must be a positive integer");
        }

        int powerOfTwo = 1;
        while (powerOfTwo * 2 <= number) {
            powerOfTwo *= 2;
        }
        return powerOfTwo;
	}
	
	public boolean delete(Handle handle){
		if(handle.getStartIndex() == -1){
			return false;
		}
		for(int i = handle.getStartIndex(); i < handle.getStartIndex() + handle.getSize(); i++){
			memoryPool[i] = 0;
		}
		FreeList newInsert = new FreeList(getNearestPowerOfTwo(handle.getSize()), handle.getStartIndex());
		FreeList searchPtr = dummy;
		while(searchPtr != null){
			if(searchPtr.getVal() == getNearestPowerOfTwo(handle.getSize())) {
				break;
			}
			searchPtr = searchPtr.getNext();
		}
		FreeList prev = searchPtr.getPrev();
		prev.setNext(newInsert);
		newInsert.setPrev(prev);
		searchPtr.setPrev(newInsert);
		newInsert.setNext(searchPtr);
		detectMerge();
		return true;
	}
	
	public void detectMerge(){
		FreeList left = dummy.getNext();
		FreeList right = left.getNext();	
		while(right != null){
			if(Math.log(left.getVal() + right.getVal()) / Math.log(2) == 0 && left.getIndex() + left.getVal() == right.getIndex()){
				FreeList newInsert = new FreeList(left.getVal() * 2, left.getIndex());
				FreeList prev = left.getPrev(), next = right.getNext();
				newInsert.setPrev(prev);
				newInsert.setNext(next);
				prev.setNext(newInsert);
				if(next != null){
					next.setPrev(newInsert);
				}
				left = newInsert;
				right = right.getNext();	
			}
			else{
				left = right;
				right = right.getNext();	
			}
		}	
	}

	public static void main(String[] args) {
	    // This is the main file for the program.
	    Parser parser = new Parser();
	    Object[] components = parser.initializeComponents(args);   
	    SemManager semManager = new SemManager();
	    semManager.memoryPool = (byte[]) components[0];
	    semManager.initializeSemManger(semManager.memoryPool.length);
	    MyHashTable hashTable = (MyHashTable) components[1];
	    File CommandFile = (File) components[2];        
	    WorldDataBase worldDataBase = new WorldDataBase(semManager, hashTable);
	    parser.ProcessSeminars(CommandFile, worldDataBase);
    }
}
