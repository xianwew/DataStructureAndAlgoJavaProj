import static org.junit.Assert.assertTrue;
import student.TestCase;
public class myHashTableTest {

    private MyHashTable hashTable;
    private Handle[] insertArr;
    
    void setUp() {
    	hashTable = new MyHashTable(1024);
        insertArr = new Handle[50];
    }

    void testHashingWithIgnoreLastElementIndex() {
        int key = 123;
        Handle handle = new Handle(-1, -1, -1);
        boolean ignoreLastElementIndex = true;

        boolean result = hashTable.hashing(key, handle, insertArr, ignoreLastElementIndex);

        assertTrue(result);
    }

    void testHashingWithoutIgnoreLastElementIndex() {
        int key = 123;
        Handle handle = new Handle(-1, -1, -1);
        boolean ignoreLastElementIndex = false;
        boolean result = hashTable.hashing(key, handle, insertArr, ignoreLastElementIndex);
        assertTrue(result);
    }

    void testHashingWithCollision() {
        int key1 = 123;
        int key2 = 456;
        Handle handle1 = new Handle(-1, -1, -1);
        Handle handle2 = new Handle(-1, -1, -1);
        boolean ignoreLastElementIndex = false;
        assertTrue(hashTable.hashing(key1, handle1, insertArr, ignoreLastElementIndex));
        assertTrue(hashTable.hashing(key2, handle2, insertArr, ignoreLastElementIndex));
    }

    void testReHash() {
        int arrSize = insertArr.length;
        for (int i = 0; i < arrSize / 2; i++) {
            int key = i;
            Handle handle = new Handle(-1, -1, -1);
            boolean ignoreLastElementIndex = false;
            assertTrue(hashTable.hashing(key, handle, insertArr, ignoreLastElementIndex));
        }
        int key = arrSize / 2;
        Handle handle = new Handle(-1, -1, -1);
        boolean ignoreLastElementIndex = false;
        assertTrue(hashTable.hashing(key, handle, insertArr, ignoreLastElementIndex));
    }
}
